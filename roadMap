‚úÖ Etapa actual (completada):
Sistema de eventos y decisiones con etiquetas.

Motor de dados funcional con animaci√≥n.

Condiciones din√°micas (etiquetasIncluye, excluye, stats, etc.).

Sistema de sonido y fondos por evento.

Combate con decisiones ramificadas.

üß© Pr√≥ximas mejoras a implementar:
1Ô∏è‚É£ Sistema de edad del jugador
 Variable edad en el estado del jugador (ej. player.edad = 18)

 En cada evento que se marque como ‚Äúpasa el tiempo‚Äù (evento.avanzaEdad: true), sumar +1 a la edad.

 Opcional: mostrar la edad en pantalla o usarla como condici√≥n (edad >= 30).

2Ô∏è‚É£ Log / Diario del jugador
 Crear una propiedad log: [] en el estado del jugador.

 Guardar event.title (o event.id) al entrar en cada evento importante.

 Crear un componente que muestre el log si el jugador lo abre.

 Opcional: permitir que ciertos eventos solo ocurran si est√°n o no est√°n en el log.

3Ô∏è‚É£ Bonos o penalizaciones narrativas adicionales
 Usar stats como contadores personalizados si hiciera falta (ej. corrupci√≥n, maldici√≥n, karma).

 Usar bonus variables en decisiones seg√∫n etiquetas (ej. si ten√©s ganzua, bonus: +2).

4Ô∏è‚É£ Finales m√∫ltiples
 Crear etiquetas como final_malo, final_bueno, final_oculto en eventos clave.

 Mostrar en pantalla o guardar cu√°l fue el final desbloqueado.

5Ô∏è‚É£ Balance y control de dificultad
 Revisar qu√© estad√≠sticas usan m√°s los eventos (fuerza, inteligencia, etc.).

 Asegurar que el jugador tenga oportunidades de subirlas en diferentes ramas del juego.

 Ajustar dificultad de combates y dados seg√∫n progreso.

üõ†Ô∏è Extras opcionales (si hay tiempo o ganas):
 Agregar etiquetas con tiempo l√≠mite (ej. herido que se elimina despu√©s de X eventos).

 Sistema de decisiones ocultas seg√∫n edad, log, o stats.

 Agregar un sistema de pistas (si el jugador falla muchas veces).

